sim-safe: SimpleScalar/PISA Tool Set version 3.0 of August, 2003.
Copyright (c) 1994-2003 by Todd M. Austin, Ph.D. and SimpleScalar, LLC.
All Rights Reserved. This version of SimpleScalar is licensed for academic
non-commercial use.  No portion of this work may be used by any commercial
entity, or for any commercial purpose, without the prior written permission
of SimpleScalar, LLC (info@simplescalar.com).

sim: command line: sim-safe -redir:sim mbq1.out mbq1 

sim: simulation started @ Wed Oct  4 14:41:14 2017, options follow:

sim-safe: This simulator implements a functional simulator.  This
functional simulator is the simplest, most user-friendly simulator in the
simplescalar tool set.  Unlike sim-fast, this functional simulator checks
for all instruction errors, and the implementation is crafted for clarity
rather than speed.

# -config                     # load configuration from a file
# -dumpconfig                 # dump configuration to a file
# -h                    false # print help message    
# -v                    false # verbose operation     
# -d                    false # enable debug message  
# -i                    false # start in Dlite debugger
-seed                       1 # random number generator seed (0 for timer seed)
# -q                    false # initialize and terminate immediately
# -chkpt               <null> # restore EIO trace execution from <fname>
# -redir:sim         mbq1.out # redirect simulator output to file (non-interactive only)
# -redir:prog          <null> # redirect simulated program output to file
-nice                       0 # simulator scheduling priority
-max:inst                   0 # maximum number of inst's to execute

sim: ** starting functional simulation **

sim: ** simulation statistics **
sim_num_insn               18006319 # total number of instructions executed
sim_num_refs                8003727 # total number of loads and stores executed
sim_elapsed_time                  1 # total simulation time in seconds
sim_inst_rate          18006319.0000 # simulation speed (in insts/sec)
sim_num_loads               4000353 # total number of load instructions
sim_load_ratio               0.2222 # load instruction fraction
sim_num_RAW_hazard_q1      10000972 # total number of RAW hazards (q1)
sim_num_RAW_hazard_q2       6000870 # total number of RAW hazards (q2)
one_cycle_stall_q1              117 # total number of one cycle stall (q1)
two_cycle_stall_q1         10000855 # total number of two cycle stall (q1)
one_cycle_stall_q2          4000779 # total number of one cycle stall (q2)
two_cycle_stall_q2          2000091 # total number of two cycle stall (q2)
CPI_from_RAW_hazard_q1       2.1108 # CPI from RAW hazard (q1)
CPI_from_RAW_hazard_q2       1.4443 # CPI from RAW hazard (q2)
sim_num_lduh                2000091 # total number of load use hazards
sim_load_use_ratio           0.1111 # load use fraction
ld_text_base             0x00400000 # program text (code) segment base
ld_text_size                  23312 # program text (code) size in bytes
ld_data_base             0x10000000 # program initialized data segment base
ld_data_size                   4096 # program init'ed `.data' and uninit'ed `.bss' size in bytes
ld_stack_base            0x7fffc000 # program stack segment base (highest address in stack)
ld_stack_size                 16384 # program initial stack size
ld_prog_entry            0x00400140 # program entry point (initial PC)
ld_environ_base          0x7fff8000 # program environment base address address
ld_target_big_endian              0 # target executable endian-ness, non-zero if big endian
mem.page_count                   13 # total number of pages allocated
mem.page_mem                    52k # total size of memory pages allocated
mem.ptab_misses                  13 # total first level page table misses
mem.ptab_accesses          88177554 # total page table accesses
mem.ptab_miss_rate           0.0000 # first level page table miss rate

